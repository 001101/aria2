aria2 1.4.0
===========

Release Note
------------

This release adds XML-RPC interface and the ability to run command
when download started/stopped and the ability to save cookies.  The
current XML-RPC API allows users to add URI/torrent/Metalink file and
change options dynamically.  The querying APIs such as reporting
download progress, file paths, URIs and peer information are also
available. For complete API specification, see
http://apps.sourceforge.net/trac/aria2/wiki/XmlrpcInterface The
console readout was slightly updated and now includes the number of
seeders the client has connected to.

Changes
-------

* Added --save-cookies option.

* Added the ability to execute command when download starts and
  stops. You can also specify command for particular cases such as
  complete/error download.  Added --on-download-start,
  --on-download-stop, --on-download-complete and --on-download-error
  option.

* Abbreviated KiB/s to KiBs and its precision decreased to 1 to save
  space in console readout. Also they are now shown in MiB/s if speed
  > 1024KiB/s.

* Added SEED to console output, which represents the number of seeders
  currently the client is connecting to.

* Added source filename(__FILE__) and line number(__LINE__) to
  exception message.

* Fixed the bug that POU peers are never choked in seeding.

* DownloadResult now has the list of FileEntry.  The download summary
  displays the path of first selected file and the number of remaining
  files for multi-file torrent.

* Added BASIC authentication for XML-RPC. Added --xml-rpc-user and
  --xml-rpc-passwd option.

* Added XML-RPC interface. See complete API specification at
  http://apps.sourceforge.net/trac/aria2/wiki/XmlrpcInterface

* Removed --enable-http-server and --http-server-listen-port options.
  Added --enable-xml-rpc and --xml-rpc-listen-port instead.  The
  original feature for --enable-http-server that reports download
  progress in HTML was officially removed.  Persist XML-RPC connection
  if client supports keep-alive.

 * Added more options that can be specified in -i list and xml-rpc
   add* command. See Input File in aria2c man page.



aria2 1.3.3
===========

Release Note
------------

This release fixes the bug that --check-integrity option doesn't work
properly if a file including last piece is missing and increases
internal receive buffer for FTP in order to receive big banner.
Ukrainian, Russian and Simplified Chinese translations were updated.

Changes
-------

 * Updated Ukrainian, Russian and Simplified Chinese
   translations. Thanks to all translators.

 * Generated configure and Makefile.in using autoconf 2.63 and
   automake 1.10.2.  Removed AC_GNU_SOURCE from configure.ac because
   it is subset of AC_USE_SYSTEM_EXTENSIONS and we use latter.

 * Supported segmented downloading with chunked transfer encoding and
   content-length.

 * Applied Pascal Bleser's patch: increases MAX_RECV_BUFFER for ftp
   from 4096 to 65536 (for insanely large ftp login banners)

 * Fixed the bug that read-only file with wrong file size will cause
   error because it cannot be truncated to the correct size.  Now if
   file size is different than the expected one, re-open file in
   writable mode.

 * Fixed the bug that with --check-integrity option aria2 reports
   downloaded file size is 0 even if some parts of file is correctly
   downloaded.  This bug is reproducible for the download that a file
   includes last piece is missing. This bug doesn't reveal for
   single-torrent with file allocation on.



aria2 1.3.2
===========

Release Note
------------

This release fixes the bug that prevents certain BitTorrent downloads
from finishing and possible segmentation fault when gzip decoding is
involved and infinite loop bug if last "0" chunk-size marker is not
received in chunked encoding transfer. aria2 now supports
WEB-Seeding(HTTP-Seeding) for single file torrent.  Ukrainian
translation was updated.

Changes
-------

 * Updated Ukrainian translation.

 * Use url-list (web-seeding) only for single-file torrent.  This is
   basically the same behavior with Metalink file with torrent and
   URIs.

 * Fixed the bug that prevents torrent download from finishing.  The
   bug doesn't reveal for all torrents. The torrents affected this bug
   satisfies ((N+7)/8)%4 == 0 and N%32 != 0 where N is the number of
   pieces.

 * Fixed segmentation fault when GZipDecoder::decode() returns 0 byte.

 * Fixed the bug that causes infinite loop if broken web server
   returns chunked response without last "0" chunk-size marker and
   closes connection.

 * Instantiate properly configured HttpDownloadCommand for
   non-resumable downloads.

 * Rewritten bitfield operation functions for efficiently.

 * Set conditional HAVE_GETADDRINFO true for mingw32. It was
   accidentally set to false in r1162.

 * Increase prefixLength for the bucket which doesn't own local node
   ID when splitting bucket.



aria2 1.3.1
===========

Release Note
------------

This release fixes the bug that aria2 wrongly determines that
specified share ratio is reached because of miscalculation of upload
bytes and the bug that upload limit exceeds the value specified in
--seed-ratio option depending on the timing of the execution of
SeedCheckCommand.

Changes
-------

* Updated README

* Fixed the bug that upload limit exceeds the value specified in
  --seed-ratio option depending on the timing of the execution of
  SeedCheckCommand.

* Fixed the bug that removed peer's session upload/download length are
  counted twice in _cachedTransferStat before it is re-calculated.
  This affected the calculation of shara ratio, resulting aria2
  wrongly determines that specified share ratio is reached.



aria2 1.3.0
===========

Release Note
------------

This release adds the ability to specify the output filenames in
BitTorrent downloads and the option to limit overall download speed
and dry run mode which just checks the availability of the remote
file. -i list option can now take new options: select-file and
index-out.  The default behavior of sending HTTP Authorization header
is reverted back to version 1.1.2 style. The bug in
AdaptiveURISelector was fixed.  You can now seed read-only files in
BitTorrent. --file-allocation option can take new parameter
'falloc'. If it is given and you are using newer file systems such as
ext4, btrfs or xfs, large(few GiB) files are allocated almost
instantly. The performance optimization has been done and aria2 runs
more efficiently.

Indonesian, Russian, Italian, Ukrainian, Simplified Chinese, Japanese,
Spanish and Norwegian Nynorsk translations were updated.

Changes
-------

* Added 'falloc' parameter for --file-allocation option.  'falloc'
  allocation mode uses posix_fallocate() system call to allocate file
  on disk.  If you are using newer file systems such as ext4 (with
  extents support), btrfs or xfs, 'falloc' is your best choice. It
  allocates large(few GiB) files almost instantly. Don't use 'falloc'
  with legacy file systems such as ext3 because it takes almost same
  time as 'prealloc' and it blocks aria2 entirely until allocation
  finishes. 'falloc' may not be available if your system doesn't have
  posix_fallocate() system call.

* Added --bt-tracker-interval option to specify the interval between
  tracker requests.  If non-zero value is specified, aria2 uses it and
  ignores the interval value in the response of tracker. If zero is
  specified, aria2 determines the inteval value based on the tarcker
  response and download progress.

* Reduced CPU usage in RarestPieceSelector.

* Reduced CPU usage when hitting download limit/upload limit.

* Changed the default value of --uri-selector option from 'inorder' to
  'feedback'
	
* Included current URI in exception message.
	
* Fixed the bug that AdaptiveURISelector doesn't select any URI when
  all URIs are tested and their timeout is not reached.

* Reuse URIs when all unused URIs run out.

* Removed --direct-file-mapping option and CopyDiskAdaptor.

* Added --dry-run option.  In this mode, aria2 just checks whether
  the remote file is available and doesn't download data. This
  option has effect on HTTP/FTP downloads and BitTorrent downloads
  are canceled in this mode.

* Parse options in -i list using OptionParser.

* Don't reset URI in retry to avoid additional round trips because
  of redirects.	

* Added --index-out option to specify each file path for torrent.  The
  index shown in --show-files option is used to specify which file
  path should be altered. For example, to change the file path with
  index=2, use --index-out=2=aria2.tar.bz2. You can use this option
  multiple times: --index-out=1=aria2.tar.bz2
  --index-out=2=aria2-opt.tar.bz2. The short hand form -O is also
  available. This option can be specified in -i list.

* Added --max-overall-download-limit option.  Now --max-upload-limit
  option is not ignored when --max-overall-upload-limit option has
  non-zero value. aria2 checks download(upload) speed in the order:
  first checks overall speed limit and if it is not exceeded, then
  checks speed limit per download.  Thus you can specify both
  value. For example, set --max-overall-download-limit=1M and
  --max-download-limit=500K to prevent from one download from eating
  all overall speed limit.

* Now select-file can be specified in the uri list(-i list).

* Made the upper value of --max-concurrent-downloads options unlimited.

* Fixed the bug that disk writer is not created even if it shares same
  piece with the preceding file if the length of previous file is 0.

* In BitTorrent, Open files in read-only mode for hash check.  After
  that, re-open file in read/write mode only when the download is
  not finished.	

* Added --http-auth-challenge option.  If it is set to true, aria2
  sends HTTP authorization header only when it is requested by the
  server. If false is set, then authorization header is always sent to
  the server. This is useful for servers that don't respond 401 code
  when authentication is required.  There is an exception: if username
  and password are embedded in URI, authorization header is always
  sent to the server regardless of this option. The default value of
  this option is false.
