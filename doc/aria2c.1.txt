ARIA2C(1)
=========
Tatsuhiro Tsujikawa <t-tujikawa@users.sourceforge.net>

NAME
----
aria2c - The ultra fast download utility

SYNOPSIS
--------
aria2c ['OPTIONS'] ['URL' | 'TORRENT_FILE' | 'METALINK_FILE']...

DESCRIPTION
-----------
aria2 is a utility for downloading files. The supported protocols are HTTP(S), FTP, BitTorrent, and Metalink. It can download a file from multiple sources/protocols and tries to utilize your maximum download bandwidth. It supports downloading a file from HTTP(S)/FTP and BitTorrent at the same time, while the data downloaded from HTTP(S)/FTP is uploaded to the BitTorrent swarm. Using Metalink's chunk checksums, aria2 automatically validates chunks of data while downloading a file like BitTorrent.

OPTIONS
-------

Basic Options
~~~~~~~~~~~~~
*-d*, *--dir*=DIR::
  The directory to store the downloaded file.

*-i*, *--input-file*=FILE::
  Downloads URIs found in FILE. You can specify multiple URIs for a single
  entity: separate URIs on a single line using the TAB character.
  Reads input from stdin when '-' is specified.
  The additional *out* and *dir* options can be specified after each line of
  URIs. This optional line must start with white space(s).
  See INPUT FILE section for details.

*-l*, *--log*=LOG::
  The file name of the log file. If '-' is specified, log is written to
  stdout.

*-j*, *--max-concurrent-downloads*=N::
  Set maximum number of parallel downloads for every static (HTTP/FTP) URL,
  torrent and metalink. See also *-s* and *-C* option.
  Default: '5'

*-V*, *--check-integrity*[='true'|'false']::
  Check file integrity by validating piece hashes.
  This option has effect only in BitTorrent and Metalink downloads with
  chunk checksums.
  Use this option to re-download a damaged portion of a file.
  Default: 'false'

*-c*, *--continue*::
   Continue downloading a partially downloaded file.
   Use this option to resume a download started by a web browser or another
   program which downloads files sequentially from the beginning.
   Currently this option is only applicable to HTTP(S)/FTP downloads.

*-h*, *--help*[=CATEGORY]::
  Print usage and exit.
  The help messages are classified in several categories.
  For example, type "*--help*=http" for detailed explanation for the options
  related to HTTP. If no matching category is found, search option name using
  a given word in middle match and print the result.
  Available Values: 'basic', 'advanced', 'http', 'ftp', 'metalink',
  'bittorrent', 'all'
  Default: 'basic'

HTTP/FTP Options
~~~~~~~~~~~~~~~~
*--all-proxy*=PROXY::
  Use this proxy server in the all protocols.
  You can override this setting and specify a proxy server for particular
  proctol using *--http-proxy*, *--https-proxy* and *--ftp-proxy* options.
  This affects all URLs.
  The format of PROXY is [\\http://][USER:PASSWORD@]HOST[:PORT]

*--connect-timeout*=SEC::
  Set the connect timeout in seconds to establish connection to
  HTTP/FTP/proxy server. After the connection is established, this
  option makes no effect and *--timeout* option is used instead.
  Default: '60'

*--lowest-speed-limit*=SPEED::
  Close connection if download speed is lower than or equal to this
  value(bytes per sec).
  '0' means aria2 does not have a lowest speed limit.
  You can append 'K' or 'M'(1K = 1024, 1M = 1024K).
  This option does not affect BitTorrent downloads.
  Default: '0'

*--max-file-not-found*=NUM::
  If aria2 recieves `file not found' status from the remote HTTP/FTP
  servers NUM times without getting a single byte, then force the
  download to fail. Specify '0' to disable this option. This options is
  only effective only when using HTTP/FTP servers.
  Default: '0'

*-m*, *--max-tries*=N::
  Set number of tries. '0' means unlimited.
  Default: '5'

*--no-proxy*=DOMAINS::
  Specify comma separated hostnames or domains to which proxy should not be
  used.

*-o*, *--out*=FILE::
  The file name of the downloaded file.

[NOTE]
In Metalink, BitTorrent download you cannot specify file name.
The file name specified here is only used when the URLs fed to aria2
is done by command line without *-i*, *-Z* option. For example:
aria2c -o myfile.zip \http://mirror1/file.zip \http://mirror2/file.zip

*--proxy-method*=METHOD::
  Set the method to use in proxy request.
  'METHOD' is either 'get' or 'tunnel'.
  Default: 'tunnel'

*-R*, *--remote-time*[='true'|'false']::
  Retrieve timestamp of the remote file from the remote HTTP/FTP
  server and if it is available, apply it to the local file.
  Default: 'false'

*--retry-wait*=SEC::
  Set the seconds to wait to retry after an error has occured.
  Specify a value between '0' and '60'.
  Default: '5'

*--server-stat-of*=FILE::
  Specify the filename to which performance profile of the servers is
  saved. You can load saved data using *--server-stat-if* option. See
  SERVER PERFORMANCE PROFILE section below for file format.

*--server-stat-if*=FILE::
  Specify the filename to load performance profile of the servers. The
  loaded data will be used in some URI selector such as 'feedback'.
  See also *--uri-selector* option. See SERVER PERFORMANCE PROFILE
  section below for file format.

*--server-stat-timeout*=SEC::
  Specifies timeout in seconds to invalidate performance profile of
  the servers since the last contact to them.
  Default: '86400' (24hours)

*-s*, *--split*=N::
  Download a file using N connections.
  If more than N URLs are given, first N URLs are used and remaining URLs are
  used for backup.
  If less than N URLs are given, those URLs are used more than once so that N
  connections total are made simultaneously.
  N must be between '1' and '16'. Please see *-j* option too.
  Please note that in Metalink download, this option has no effect and use
  *-C* option instead.
  Default: '5'

*-t*, *--timeout*=SEC::
  Set timeout in seconds.
  Default: '60'

*--uri-selector*=SELECTOR::
  Specify URI selection algorithm. Possible values are 'inorder' and
  'feedback'.  If 'inorder' is given, URI is tried in the order
  appeared in the URI list.  If 'feedback' is given, aria2 uses
  download speed observed in the previous downloads and choose fastest
  server in the URI list. This also effectively skips dead
  mirrors. The observed download speed is a part of performance
  profile of servers mentioned in *--server-stat-of* and
  *--server-stat-if* options.
  Default: 'inorder'

HTTP Specific Options
~~~~~~~~~~~~~~~~~~~~~
*--ca-certificate*=FILE::
  Use the certificate authorities in FILE to verify the peers.
  The certificate file must be in PEM format and can contain multiple CA
  certificates.
  Use *--check-certificate* option to enable verification.

*--certificate*=FILE::
  Use the client certificate in FILE.
  The certificate must be in PEM format.
  You may use *--private-key* option to specify the private key.

*--check-certificate*[='true'|'false']::
  Verify the peer using certificates specified in *--ca-certificate* option.

*--http-auth-scheme*=SCHEME::
  Set HTTP authentication scheme.
  Currently, 'basic' is the only supported scheme.
  Default: 'basic'

*--http-user*=USER::
  Set HTTP user. This affects all URLs.

*--http-passwd*=PASSWD::
  Set HTTP password. This affects all URLs.

*--http-proxy*=PROXY::
  Use this proxy server for HTTP. See also *--all-proxy* option.
  This affects all URLs.
  The format of PROXY is [\\http://][USER:PASSWORD@]HOST[:PORT]

*--https-proxy*=PROXY::
  Use this proxy server for HTTPS. See also *--all-proxy* option.
  This affects all URLs.
  The format of PROXY is [\\http://][USER:PASSWORD@]HOST[:PORT]

*--private-key*=FILE::
  Use the private key in FILE.
  The private key must be decrypted and in PEM format.
  The behavior when encrypted one is given is undefined.
  See also *--certificate* option.

*--referer*=REFERER::
  Set Referer. This affects all URLs.

*--enable-http-keep-alive*[='true'|'false']::
  Enable HTTP/1.1 persistent connection.
  Default: 'true'

*--enable-http-pipelining*[='true'|'false']::
  Enable HTTP/1.1 pipelining.
  Default: 'false'

*--header*=HEADER::
  Append HEADER to HTTP request header.
  You can use this option repeatedly to specify more than one header:
  aria2c *--header*="X-A: b78" *--header*="X-B: 9J1" \http://host/file

*--load-cookies*=FILE::
  Load Cookies from FILE using the Firefox3 format(SQLite3) and the
  Mozilla/Firefox(1.x/2.x)/Netscape format.

[NOTE]
If aria2 is build without libsqlite3, then it doesn't support Firefox3 cookie.

*-U*, *--user-agent*=USER_AGENT::
  Set user agent for HTTP(S) downloads.

FTP Specific Options
~~~~~~~~~~~~~~~~~~~~
*--ftp-user*=USER::
  Set FTP user. This affects all URLs.
  Default: 'anonymous'

*--ftp-passwd*=PASSWD::
  Set FTP password. This affects all URLs.
  Default: 'ARIA2USER@'

*-p*, *--ftp-pasv*[='true'|'false']::
  Use the passive mode in FTP.
  If 'false' is given, the active mode will be used.
  Default: 'true'

*--ftp-proxy*=PROXY::
  Use this proxy server for FTP. See also *--all-proxy* option.
  This affects all URLs.
  The format of PROXY is [\\http://][USER:PASSWORD@]HOST[:PORT]

*--ftp-type*=TYPE::
  Set FTP transfer type. TYPE is either 'binary' or 'ascii'.
  Default: 'binary'

*--ftp-reuse-connection*[='true'|'false']::
  Reuse connection in FTP.
  Default: 'true'

*-n*, *--no-netrc*::
  Disables netrc support. netrc support is enabled by default.

BitTorrent/Metalink Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~
*--select-file*=INDEX...::
  Set file to download by specifing its index.
  You can find the file index using the *--show-files* option.
  Multiple indexes can be specified by using ",", for example: '3,6'.
  You can also use "-" to specify a range: '1-5'.
  "," and "-" can be used together: '1-5,8,9'.
  When used with the -M option, index may vary depending on the query
  (see *--metalink-** options).

[NOTE]
In multi file torrent, the adjacent files specified by this option may
also be downloaded. This is by design, not a bug.
A single piece may include several files or part of files, and aria2
writes the piece to the appropriate files.

*-S*, *--show-files*::
  Print file listing of .torrent or .metalink file and exit.
  In case of .torrent file, additional information
  (infohash, piece length, etc) is also printed.

BitTorrent Specific Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~
*--bt-max-open-files*=NUM::
  Specify maximum number of files to open in each BitTorrent download.
  Default: '100'

*--bt-min-crypto-level*='plain'|'arc4'::
  Set minimum level of encryption method.
  If several encryption methods are provided by a peer, aria2 chooses a lowest
  one which satisfies the given level.
  Default: 'plain'

*--bt-require-crypto*='true'|'false'::
  If true is given, aria2 doesn't accept and establish connection with legacy
  BitTorrent handshake(\19BitTorrent protocol).
  Thus aria2 always uses Obfuscation handshake.
  Default: 'false' 

*--bt-request-peer-speed-limit*=SPEED::
  In BitTorrent downloads, if the download speed is lower than SPEED,
  aria2 initiates and accepts connections ignoring max peer cap.
  You can append 'K' or 'M'(1K = 1024, 1M = 1024K).
  Default: '51200'

*--bt-seed-unverified*[='true'|'false']::
  Seed previously downloaded files without verifying piece hashes.
  Default: 'false'

*--dht-entry-point*=HOST:PORT::
  Set host and port as an entry point to DHT network.

*--dht-file-path*=PATH::
  Change the DHT routing table file to PATH.
  Default: '$HOME/.aria2/dht.dat'

*--dht-listen-port*=PORT...::
  Set UDP listening port for DHT.
  Multiple ports can be specified by using ",", for example: '6881,6885'.
  You can also use "-" to specify a range: '6881-6999'. "," and "-" can be used
  together.
  Default: '6881-6999'

*--direct-file-mapping*='true'|'false'::
  Directly read from and write to each file mentioned in .torrent file.
  Use this option if lots of files are listed in .torrent file and aria2
  complains it cannot open files anymore.
  Default: 'true'

*--enable-dht*[='true'|'false']::
  Enable DHT functionality. If a private flag is set in a torrent, aria2
  doesn't use DHT for that download even if 'true' is given.
  Default: 'false'

*--enable-peer-exchange*[='true'|'false']::
  Enable Peer Exchange extension. If a private flag is set in a torrent, this
  feature is disabled for that download even if 'true' is given.
  Default: 'true'

*--follow-torrent*='true'|'false'|'mem'::
  If 'true' or 'mem' is specified, when a file whose suffix is ".torrent" or content
  type is "application/x-bittorrent" is downloaded, aria2 parses it as a torrent
  file and downloads files mentioned in it.
  If 'mem' is specified, a torrent file is not written to the disk, but is just
  kept in memory.
  If 'false' is specified, the action mentioned above is not taken.
  Default: 'true'

*--listen-port*=PORT...::
  Set TCP port number for BitTorrent downloads.
  Multiple ports can be specified by using ",",  for example: '6881,6885'.
  You can also use "-" to specify a range: '6881-6999'.
  "," and "-" can be used together: '6881-6889,6999'.
  Default: '6881-6999'

[NOTE]
Make sure that the specified ports are open for incoming TCP traffic.

*-u*, *--max-upload-limit*=SPEED::
  Set max upload speed in bytes per sec. '0' means unrestricted.
  You can append 'K' or 'M'(1K = 1024, 1M = 1024K).
  Default: '0'

*--peer-id-prefix*=PEERI_ID_PREFIX::
  Specify the prefix of peer ID. The peer ID in BitTorrent is 20 byte length.
  If more than 20 bytes are specified, only first 20 bytes are used.
  If less than 20 bytes are specified, the random alphabet characters are
  added to make it's length 20 bytes.
  Default: '-aria2-'

*--seed-ratio*=RATIO::
  Specify share ratio. Seed completed torrents until share ratio reaches]
  RATIO.
  I strongly encourages you to specify equals or more than '1.0' here.
  Specify '0.0' if you intend to do seeding regardless of share ratio.
  If *--seed-time* option is specified along with this option, seeding ends when
  at least one of the conditions is satisfied.
  Default: '1.0'

*--seed-time*=MINUTES::
  Specify seeding time in minutes. Also see the *--seed-ratio* option.

*-T*, *--torrent-file*=TORRENT_FILE::
  The path to the .torrent file.
  You may not use this option because you can specify torrent file without -T.

Metalink Specific Options
~~~~~~~~~~~~~~~~~~~~~~~~~
*--follow-metalink*='true'|'false'|'mem'::
  If 'true' or 'mem' is specified, when a file whose suffix is ".metaink" or content
  type is "application/metalink+xml" is downloaded, aria2 parses it as a metalink
  file and downloads files mentioned in it.
  If 'mem' is specified, a metalink file is not written to the disk, but is just
  kept in memory.
  If 'false' is specified, the action mentioned above is not taken.
  Default: 'true'

*-M*, *--metalink-file*=METALINK_FILE::
  The file path to .metalink file. You may not use this option because you can
  specify metalink file without -M.

*-C*, *--metalink-servers*=NUM_SERVERS::
  The number of servers to connect to simultaneously.
  Some Metalinks regulates the number of servers to connect.
  aria2 strictly respects them.
  This means that if Metalink defines the maxconnections attribute lower
  than NUM_SERVERS, then aria2 uses the value of maxconnections attribute
  instead of NUM_SERVERS.
  See also *-s* and *-j* options.
  Default: '5'

*--metalink-language*=LANGUAGE::
  The language of the file to download.

*--metalink-location*=LOCATION[,...]::
  The location of the preferred server.
  A comma-deliminated list of locations is acceptable, for example, 'JP,US'.

*--metalink-os*=OS::
  The operating system of the file to download.

*--metalink-version*=VERSION::
  The version of the file to download.

*--metalink-preferred-protocol*=PROTO::
  Specify preferred protocol.
  The possible values are 'http', 'https', 'ftp' and 'none'.
  Specifiy 'none' to disable this feature.
  Default: 'none'
 
*--metalink-enable-unique-protocol*='true'|'false'::
  If 'true' is given and several protocols are available for a mirror in a
  metalink file, aria2 uses one of them.
  Use *--metalink-preferred-protocol* option to specify the preference of
  protocol.
  Default: 'true'

Advanced Options
~~~~~~~~~~~~~~~~
*--allow-overwrite*='true'|'false'::
  If 'false' is given, aria2 doesn't download a file which already exists but
  the corresponding .aria2 file doesn't exist.
  In HTTP(S)/FTP download, if *--auto-file-renaming*='true' then,
  file name will be renamed. See *--auto-file-renaming* for details.
  Default: 'false'

*--allow-piece-length-change*='true'|'false'::
  If false is given, aria2 aborts download when a piece length is different
  from one in a control file.
  If true is given, you can proceed but some download progress will be lost.
  Default: 'false'

*--async-dns*[='true'|'false']::
  Enable asynchronous DNS.
  Default: 'true'

*--auto-file-renaming*[='true'|'false']::
  Rename file name if the same file already exists.
  This option works only in HTTP(S)/FTP download.
  The new file name has a dot and a number(1..9999) appended.
  Default: 'true'

*--auto-save-interval*=SEC::
  Save a control file(*.aria2) every SEC seconds.
  If '0' is given, a control file is not saved during download. aria2 saves a
  control file when it stops regardless of the value.
  The possible values are between '0' to '600'.
  Default: '60'

*--conf-path*=PATH::
  Change the configuration file path to PATH.
  Default: '$HOME/.aria2/aria2.conf'

*-D*, *--daemon*::
  Run as daemon.

*--enable-direct-io*[='true'|'false']::
  Enable directI/O, which lowers cpu usage while allocating/checking files.
  Turn off if you encounter any error.
  Default: 'true'

*--file-allocation*=METHOD::
  Specify file allocation method. METHOD is either 'none' or 'prealloc'.
  'none' doesn't pre-allocate file space. 'prealloc' pre-allocates file space
  before download begins. This may take some time depending on the size of the
  file.
  Default: 'prealloc'

*--log-level*=LEVEL::
  Set log level to output.
  LEVEL is either 'debug', 'info', 'notice', 'warn' or 'error'.
  Default: 'debug'

*--summary-interval*=SEC::
  Set interval in seconds to output download progress summary.
  Setting '0' suppresses the output.
  Default: '60'

[NOTE]
In multi file torrent, the files adjacent forward to the specified files
are also allocated if they share a same piece.

*-Z*, *--force-sequential*[='true'|'false']::
  Fetch URIs in the command-line sequentially and download each URI in a
  separate session, like the usual command-line download utilities.
  Default: 'false'

*--max-download-limit*=SPEED::
   Set max download speed in bytes per sec. '0' means unrestricted.
   You can append 'K' or 'M'(1K = 1024, 1M = 1024K).
   Default: '0'

*--no-conf*::
  Disable loading aria2.conf file.

*--no-file-allocation-limit*=SIZE::
  No file allocation is made for files whose size is smaller than SIZE.
  You can append 'K' or 'M'(1K = 1024, 1M = 1024K).
  Default: '5M'

*-P*, *--parameterized-uri*[='true'|'false']::
  Enable parameterized URI support.
  You can specify set of parts: 'http://{sv1,sv2,sv3}/foo.iso'.
  Also you can specify numeric sequences with step counter:
  '\\http://host/image[000-100:2].img'.
  A step counter can be omitted.
  If all URIs do not point to the same file, such as the second example above,
  -Z option is required.
  Default: 'false'

*-q*, *--quiet*[='true'|'false']::
  Make aria2 quite (no console output).
  Default: 'false'

*--realtime-chunk-checksum*='true'|'false'::
   Validate chunk of data by calculating checkusm while download a file if
   chunk checksums are provided. Currently Metalink is the only way to to
   provide chunk checksums.
   Default: 'true'

*--stop*=SEC::
  Stop application after SEC seconds has passed.
  If '0' is given, this feature is disabled.
  Default: '0'
 
*-v*, *--version*::
  Print the version number, copyright and the configuration information and
  exit.

OPTIONS THAT TAKES OPTIONAL ARGUMENTS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The options that has its arguments surrounded by square brackets([])
are optional. Usually ommiting the argument is evaluated to 'true'.
If you use short form of these option(such as '-V') of these options and give
arugment, then the option name and its argument should be concatenated like
'-Vfalse'). If any spaces are inserted between the option name and argument, the
argument treated as URI and usually this is not what you expect.

URL, TORRENT_FILE, METALINK_FILE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can specify multiple URLs in command-line.
Unless you specify *-Z* option, all URLs must point to the same file or downloading will fail.

You can also specify arbitrary number of torrent files and metalink files
stored in a local drive. Please note that they are always treated as a
separate download.

You can specify both torrent file with -T option and URLs. By doing this,
download a file from both torrent swarm and HTTP(S)/FTP server at the same time,
while the data from HTTP(S)/FTP are uploaded to the torrent swarm. Note that
only single file torrent can be integrated with HTTP(S)/FTP.

[NOTE]
Make sure that URL is quoted with single(\') or double(") quotation if it
contains "&" or any characters that have special meaning in shell.

EXAMPLES
--------
HTTP/FTP Segmented Download
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Download a file
^^^^^^^^^^^^^^^
--------------------------------
aria2c http://host/file.zip
--------------------------------
[NOTE]
aria2 uses 5 connections to download 1 file by default.

Download a file using 1 connection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------------------------
aria2c -s1 http://host/file.zip
----------------------------------
[NOTE]
aria2 uses 5 connections to download 1 file by default.
-s1 limtis the number of connections to just 1.

[NOTE]
To pause a download, press Ctrl-C. You can resume the transfer by running aria2c with the same argument at the same directory. You can change URLs as long as they are pointing to the same file.

Download a file from 2 different HTTP servers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--------------------------------------------------
aria2c http://host/file.zip http://mirror/file.zip
--------------------------------------------------

Download a file from HTTP and FTP servers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-------------------------------------------------
aria2c http://host1/file.zip ftp://host2/file.zip
-------------------------------------------------

Download files listed in a file concurrently
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------
aria2c -ifiles.txt -j2
------------------------
[NOTE]
-j option specifies the number of parallel downloads.

Using proxy
^^^^^^^^^^^
For HTTP:
------------------------------------------------------
aria2c --http-proxy=http://proxy:8080 http://host/file
------------------------------------------------------
For FTP:
------------------------------------------------------
aria2c --ftp-proxy=http://proxy:8080 ftp://host/file
------------------------------------------------------

[NOTE]
See *--http-proxy*, *--https-proxy*, *--ftp-proxy* and *--all-proxy* for
details.
You can specify proxy in the environment variables. See ENVIRONMENT section.

Proxy with authorization
^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------------------------
aria2c --http-proxy=http://username:password@proxy:8080 http://host/file
------------------------------------------------------

Metalink Download
~~~~~~~~~~~~~~~~~
Download files with remote Metalink
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------------------------
aria2c --follow-metalink=mem http://host/file.metalink
------------------------------------------------------

Download using a local metalink file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------------------------------------------------
aria2c -p --lowest-speed-limit=4000 file.metalink
----------------------------------------------------------
[NOTE]
To pause a download, press Ctrl-C.
You can resume the transfer by running aria2c with the same argument at the same
directory.

Download several local metalink files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------------------------------
aria2c -j2 file1.metalink file2.metalink
----------------------------------------

Download only selected files using index
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-------------------------------------------
aria2c --select-file=1-4,8 file.metalink
-------------------------------------------
[NOTE]
The index is printed to the console using -S option.

Download a file using a local .metalink file with user preference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------------------------------------------------
aria2c --metalink-location=JP,US --metalink-version=1.1 --metalink-language=en-US file.metalink
------------------------------------------------------------------------------

BitTorrent Download
~~~~~~~~~~~~~~~~~~~
Download files from remote BitTorrent file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-------------------------------------------------------
aria2c --follow-torrent=mem http://host/file.torrent
-------------------------------------------------------

Download using a local torrent file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
---------------------------------------------
aria2c --max-upload-limit=40K file.torrent
---------------------------------------------
[NOTE]
--max-upload-limit specifies the max of upload rate.

[NOTE]
To pause a download, press Ctrl-C. You can resume the transfer by run aria2c with the same argument at the same directory.

Download 2 torrents
^^^^^^^^^^^^^^^^^^^
--------------------------------------
aria2c -j2 file1.torrent file2.torrent
--------------------------------------

Download a file using torrent and HTTP/FTP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-----------------------------------------------------------
aria2c -Ttest.torrent http://host1/file ftp://host2/file
-----------------------------------------------------------
[NOTE]
Downloading multi file torrent with HTTP/FTP is not supported.

Download only selected files using index(usually called "selectable download")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
---------------------------------------
aria2c --select-file=1-4,8 file.torrent
---------------------------------------
[NOTE]
The index is printed to the console using -S option.

Change the listening port for incoming peer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
---------------------------------------------------
aria2c --listen-port=7000-7001,8000 file.torrent
---------------------------------------------------
[NOTE]
Since aria2 doesn't configure firewall or router for port forwarding, it's up
to you to do it manually.

Specify the condition to stop program after torrent download finished
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-------------------------------------------------------
aria2c --seed-time=120 --seed-ratio=1.0 file.torrent
-------------------------------------------------------

[NOTE]
In the above example, the program exists when the 120 minutes has elapsed since download completed or seed ratio reaches 1.0.

Throttle upload speed
^^^^^^^^^^^^^^^^^^^^^
----------------------------------------------
aria2c --max-upload-limit=100K file.torrent
---------------------------------------------- 

Enable DHT
^^^^^^^^^^
---------------------------------------------------------
aria2c --enable-dht --dht-listen-port=6881 file.torrent
---------------------------------------------------------
[NOTE]
DHT uses udp port. Since aria2 doesn't configure firewall or router for port
forwarding, it's up to you to do it manually.

More advanced HTTP features
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Load cookies
^^^^^^^^^^^^
------------------------------------------------------
aria2c --load-cookies=cookies.txt http://host/file.zip
------------------------------------------------------
[NOTE]
You can use Firefox/Mozilla's cookie file without modification.

Resume download started by web browsers or another programs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
---------------------------------------------------
aria2c -c -s2 http://host/partiallydownloadedfile.zip 
---------------------------------------------------

Client certificate authorization for SSL/TLS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------------------------------------------------------------
aria2c --certificate=/path/to/mycert.pem --private-key=/path/to/mykey.pem https://host/file
------------------------------------------------------------------------------------------
[NOTE]
The file specified in *--private-key* must be decrypted. The behavior when
encrypted one is given is undefined.

Verify peer in SSL/TLS using given CA certificates
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------------------------------------------------------------
aria2c --ca-certificate=/path/to/ca-certificates.crt --check-certificate https://host/file
------------------------------------------------------------------------------------------

And more advanced features
~~~~~~~~~~~~~~~~~~~~~~~~~~
Throttle download speed
^^^^^^^^^^^^^^^^^^^^^^^
-------------------------------------------------
aria2c --max-download-limit=100K file.metalink
-------------------------------------------------

Repair a damaged download using -V option
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-----------------------
aria2c -V file.metalink
-----------------------
[NOTE]
This option is only available used with BitTorrent or metalink with chunk
checksums.

Drop connection if download speed is lower than specified value
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------------------
aria2c --lowest-speed-limit=10K file.metalink
------------------------------------------------

Parameterized URI support
^^^^^^^^^^^^^^^^^^^^^^^^^
You can specify set of parts:
---------------------------------------------
aria2c -P http://{host1,host2,host3}/file.iso
---------------------------------------------

You can specify numeric sequence:
-------------------------------------------
aria2c -Z -P http://host/image[000-100].png
-------------------------------------------

[NOTE]
-Z option is required if the all URIs don't point to the same file, such as the above example.

You can specify step counter:
-----------------------------------------
aria2c -Z -P http://host/image[A-Z:2].png 
-----------------------------------------

Parallel downloads of arbitrary number of URL,metalink,torrent
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------------------------------
aria2c -j3 -Z http://host/file1 file2.torrent file3.metalink
------------------------------------------------------------

BitTorrent Encryption
^^^^^^^^^^^^^^^^^^^^^
Encrypt whole payload using ARC4:
-------------------------------------------------------------------------
aria2c --bt-min-crypto-level=arc4 --bt-require-crypto=true file.torrent
-------------------------------------------------------------------------

RESUME DOWNLOAD
---------------
Usually, you can resume transfer by just issuing same command(aria2c URL)
if the previous transfer is made by aria2.

If the previous transfer is made by a browser or wget like sequencial
download manager, then use -c option to continue the transfer(aria2c -c URL).

CONTROL FILE
------------
aria2 uses a control file to keep track the progress of download.
A control file is placed at the same directory of the dowloading file and
its filename is the filename of downloading file with ".aria2" appended.
For example, if you are downloading file.zip, then the control file should be
file.zip.aria2.
(There is a exception for this naming convention.
If you are downloading a multi torrent, its control file is the "top directory"
name of the torrent with ".aria2" appended.
The "top directory" name is a value of "name" key in "info" directory in a torrent file.)

Usually a control file is deleted once download completed.
If aria2 decides that download cannot be resumed(for example, when downloading
a file from a HTTP server which doesn't support resume), a control file is
not created.

Normally if you lose a control file, you cannot resume download.
But if you have a torrent or metalink with chunk checksums for the file,
you can resume the download without a control file by giving
-V option to aria2c in command-line.

SEEDING DOWNLOADED FILE IN BITTORRENT
-------------------------------------
You can seed downloaded file using -V option.
----------------------
aria2c -V file.torrent
----------------------

INPUT FILE
----------
The input file can contain list of URIs to feed them into aria2.
You can specify multiple URIs for a single entity:
separate URIs on a single line using the TAB character.

Each line is treated as if it is provided in command-line argument.
Therefore they are affected by *-Z* and *-P* options.
The additional *out* and *dir* options can be specified after each line of
URIs. This optional line must start with white space(s).

For example, the content of uri.txt is:
---------------------------------------------
http://server/file.iso http://mirror/file.iso
  dir=/iso_images
  out=file.img
http://foo/bar
---------------------------------------------

and if aria2 is executed with -i uri.txt -d /tmp options,
then file.iso is saved as /iso_images/file.img and it is downloaded from
\http://server/file.iso and \http://mirror/file.iso.
The file bar is downloaded from \http://foo/bar and saved as /tmp/bar.

SERVER PERFORMANCE PROFILE
--------------------------
This section describes the format of server performance profile.
The file is plain text and each line has several NAME=VALUE pair, delimited by
comma.
Currently following NAMEs are recognized:

host::
  Hostname of the server. Required.

protocol::
  Protocol for this profile, such as ftp, http. Required.

dl_speed::
  The average download speed observed in the previous download in bytes per sec.
  Required.

last_updated::
  Last contact time in GMT with this server, specified in the seconds from the
  Epoch. Required.

status::
  ERROR is set when server cannot be reached or out-of-service or timeout
  occurred. Otherwise, OK is set.

Those fields must exist in one line. The order of the fields is not significant.You can put pairs other than above; they are simply ignored.

An example is follow:
--------------------------------------------------------------------------------
host=localhost, protocol=http, dl_speed=32000, last_updated=1222491640, status=OK
host=localhost, protocol=ftp, dl_speed=0, last_updated=1222491632, status=ERROR
--------------------------------------------------------------------------------

FILES
-----
aria2.conf
~~~~~~~~~~
User configuration file.
It must be placed under $HOME/.aria2 and must be named as aria2.conf.
In each line, there is 1 parameter whose syntax is name=value pair,
where name is the long command-line option name without '--' prefix.
The lines beginning '#' are treated as comments.

--------------------------------------
# sample configuration file for aria2c
listen-port=60000
dht-listen-port=60000
seed-ratio=1.0
max-upload-limit=50K
ftp-pasv=true
--------------------------------------

dht.dat
~~~~~~~~
By default, the routing table of DHT is saved to the path $HOME/.aria2/dht.dat.

ENVIRONMENT
-----------
aria2 recognizes the following environment variables.

http_proxy [\\http://][USER:PASSWORD@]HOST[:PORT]::
  Specify proxy server for use in HTTP.
  Overrides http-proxy value in configuration file.
  The command-line option *--http-proxy* overrides this value.

https_proxy [\\http://][USER:PASSWORD@]HOST[:PORT]::
  Specify proxy server for use in HTTPS.
  Overrides https-proxy value in configuration file.
  The command-line option *--https-proxy* overrides this value.

ftp_proxy [\\http://][USER:PASSWORD@]HOST[:PORT]::
  Specify proxy server for use in FTP.
  Overrides ftp-proxy value in configuration file.
  The command-line option *--ftp-proxy* overrides this value.

all_proxy [\\http://][USER:PASSWORD@]HOST[:PORT]::
  Specify proxy server for use if no protocol-specific proxy is specified.
  Overrides all-proxy value in configuration file.
  The command-line option *--all-proxy* overrides this value.

no_proxy [DOMAIN,...]::
  Specify comma-separated hostname or domains to which proxy should not be used.
  Overrides no-proxy value in configuration file.
  The command-line option *--no-proxy* overrides this value.

RESOURCES
---------
Project web site: http://aria2.sourceforge.net/[]

metalink: http://www.metalinker.org/[]

REPORTING BUGS
--------------
Report bugs to Tatsuhiro Tsujikawa <t-tujikawa at users.sourceforge.net>

AUTHOR
------
Tatsuhiro Tsujikawa <t-tujikawa at users.sourceforge.net>

COPYRIGHT
---------
Copyright (C) 2006, 2008 Tatsuhiro Tsujikawa

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

In addition, as a special exception, the copyright holders give
permission to link the code of portions of this program with the
OpenSSL library under certain conditions as described in each
individual source file, and distribute linked combinations
including the two.
You must obey the GNU General Public License in all respects
for all of the code used other than OpenSSL.  If you modify
file(s) with this exception, you may extend this exception to your
version of the file(s), but you are not obligated to do so.  If you
do not wish to do so, delete this exception statement from your
version.  If you delete this exception statement from all source
files in the program, then also delete it here.
